{"version":3,"sources":["App.js","Actions/Actions.js","Actions/Types.js","Reducers/Reducer.js","serviceWorker.js","index.js","Components/Reminders.png"],"names":["App","state","text","date","Date","handleReminders","reminders","props","className","map","item","key","id","moment","fromNow","onClick","Remove","src","logo","alt","type","placeholder","value","this","onChange","e","setState","target","placeholderText","selected","showTimeSelect","timeFormat","timeCaption","dateFormat","Add","Clear","Component","connect","Reducer","action","reminder","read_cookie","Math","random","bake_cookie","filter","Boolean","window","location","hostname","match","Store","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0SAUMA,G,kNACJC,MAAO,CACLC,KAAM,GACNC,KAAM,IAAIC,M,EAGZC,gBAAiB,WAAO,IACfC,EAAa,EAAKC,MAAlBD,UACP,OACE,wBAAIE,UAAU,cAEVF,EAAUG,KAAI,SAAAC,GACZ,OACE,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAKE,IACtC,6BAAMF,EAAKR,MACX,6BAAMW,IAAO,IAAIT,KAAKM,EAAKP,OAAOW,WAClC,4BAAQN,UAAU,iCAAiCO,QAAS,kBAAM,EAAKR,MAAMS,OAAON,EAAKE,MAAzF,gB,wEASN,IAAD,OAEP,OACE,yBAAKJ,UAAU,OACb,6BACE,yBAAKS,IAAKC,IAAMV,UAAU,UAAUW,IAAI,cAG1C,yBAAKX,UAAU,+BACb,wBAAIA,UAAU,mBAAd,sBAGE,2BAAQY,KAAK,OACLC,YAAY,2BACZC,MAAOC,KAAKtB,MAAMC,KAClBM,UAAU,oBACVgB,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACxB,KAAMuB,EAAEE,OAAOL,WAGvD,kBAAC,IAAD,CACIA,MAAOC,KAAKtB,MAAME,KAClByB,gBAAgB,aAChBpB,UAAU,eACVqB,SAAUN,KAAKtB,MAAME,KACrBqB,SAAU,SAAArB,GAAI,OAAI,EAAKuB,SAAS,CAACvB,KAAMA,KACvC2B,gBAAc,EACdC,WAAW,QACXC,YAAY,OACZC,WAAW,yBAIf,4BAAQzB,UAAU,sDACVO,QAAS,WACP,EAAKR,MAAM2B,IAAI,EAAKjC,MAAMC,KAAM,EAAKD,MAAME,MAC3C,EAAKuB,SAAS,CAACxB,KAAM,GAAIC,KAAM,OAHzC,gBAOCoB,KAAKlB,kBAEN,4BAAQG,UAAU,gDACVO,QAAS,kBAAM,EAAKR,MAAM4B,UADlC,uB,GAlEMC,cA4EHC,eAAQ,SAAApC,GACrB,MAAO,CAACK,UAAUL,KACjB,CAACiC,ICtFe,SAAChC,EAAMC,GAMtB,MALe,CACXiB,KCJoB,eDKpBlB,OACAC,SDkFCa,OC7Ea,SAACJ,GAKnB,MAJe,CACXQ,KCZuB,kBDavBR,OD0ESuB,MCrEI,WAIjB,MAHe,CACXf,KCnBsB,oBFoFfiB,CAEUrC,G,wBG7DVsC,EAzBC,WAAuB,IAAtBrC,EAAqB,uDAAf,GAAIsC,EAAW,uCAG9BC,EAAW,KAIf,OAFAvC,EAAOwC,sBAAY,YDPK,iBCSrBF,EAAOnB,MACNoB,EAAQ,sBAAOvC,GAAP,CAAc,CAACC,KAAMqC,EAAOrC,KAAMC,KAAKoC,EAAOpC,KAAMS,GAAG8B,KAAKC,YACpEC,sBAAY,WAAYJ,GACjBA,GDXgB,oBCYjBD,EAAOnB,MACboB,EAAWvC,EAAM4C,QAAO,SAAAL,GAAQ,OAAIA,EAAS5B,KAAO2B,EAAO3B,MAC3DgC,sBAAY,WAAYJ,GACjBA,GDde,mBCehBD,EAAOnB,MACboB,EAAW,GACXI,sBAAY,WAAYJ,GACjBA,GAEAvC,GCVK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCPAC,EAAQC,YAAYd,GAE1Be,IAASC,OAAO,kBAAC,IAAD,CAAUC,MAAOJ,GAAO,kBAAC,EAAD,OAAqBK,SAASC,eAAe,SDoH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.6c9061e1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Add, Remove, Clear} from './Actions/Actions';\nimport {connect} from 'react-redux'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from 'moment'\nimport logo from './Components/Reminders.png'\n\nimport './App.css';\n\nclass App extends Component{\n  state= {\n    text: '',\n    date: new Date()\n  }\n\n  handleReminders =() => {\n    const {reminders} = this.props;\n    return (\n      <ul className='list-group'>\n        {\n          reminders.map(item => {\n            return (\n              <li className='list-group-item' key={item.id}>\n                  <div>{item.text}</div>\n                  <div>{moment(new Date(item.date)).fromNow()}</div>\n                  <button className='btn btn-danger text-capitalize' onClick={() => this.props.Remove(item.id)}>remove</button>\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div>        \n          <img src={logo} className='d-block' alt='Reminder'/>\n        </div>\n  \n        <div className='title mt-3 mb-3 text-center'>\n          <h2 className='text-capitalize'>what should i do?</h2>\n        </div>\n  \n            <input  type='text'\n                    placeholder='Enter What U Think ....?'\n                    value={this.state.text}\n                    className='form-control mb-3'\n                    onChange={(e) => this.setState({text: e.target.value})}\n            />\n\n            <DatePicker\n                value={this.state.date}\n                placeholderText='Enter Date'\n                className='form-control'\n                selected={this.state.date}\n                onChange={date => this.setState({date: date})}\n                showTimeSelect\n                timeFormat=\"HH:mm\"\n                timeCaption=\"time\"\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\n            />\n\n\n            <button className='btn btn-primary text-capitalize btn-block mb-3 mt-3'\n                    onClick={() => {\n                      this.props.Add(this.state.text, this.state.date)\n                      this.setState({text: '', date: ''})\n                    }}\n            >add reminder</button>\n\n            {this.handleReminders()}\n\n            <button className='btn btn-danger text-capitalize btn-block mt-2'\n                    onClick={() => this.props.Clear()}\n            >clear reminder</button>\n  \n      </div>\n    );\n  }\n\n}\n\nexport default connect(state => {\n  return {reminders:state}\n}, {Add, Remove, Clear})(App);\n","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDER} from './Types';\r\n\r\nexport const Add = (text, date) => {\r\n    const action = {\r\n        type : ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    return action\r\n}\r\n\r\nexport const Remove = (id) => {\r\n    const action = {\r\n        type : REMOVE_REMINDER,\r\n        id\r\n    }\r\n    return action\r\n}\r\n\r\nexport const Clear = () => {\r\n    const action = {\r\n        type : CLEAR_REMINDER,\r\n    }\r\n    return action\r\n}","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER'\r\nexport const CLEAR_REMINDER = 'CLEAR_REMINDER'","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDER} from '../Actions/Types';\r\nimport {bake_cookie, read_cookie} from 'sfcookies'\r\nconst Reducer = (state=[], action) => {\r\n\r\n    \r\n    let reminder = null\r\n\r\n    state= read_cookie('reminder')\r\n\r\n    if(action.type === ADD_REMINDER) {\r\n        reminder = [...state, {text: action.text, date:action.date, id:Math.random()}]\r\n        bake_cookie('reminder', reminder)\r\n        return reminder\r\n    }else if (action.type === REMOVE_REMINDER) {\r\n        reminder = state.filter(reminder => reminder.id !== action.id)\r\n        bake_cookie('reminder', reminder)\r\n        return reminder\r\n    }else if (action.type === CLEAR_REMINDER) {\r\n        reminder = []\r\n        bake_cookie('reminder', reminder)\r\n        return reminder\r\n    }else{\r\n        return state\r\n    }\r\n    \r\n}\r\n\r\nexport default Reducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport Reducer from './Reducers/Reducer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nconst Store = createStore(Reducer)\n\nReactDOM.render(<Provider store={Store}><App /></Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Reminders.2c51f81e.png\";"],"sourceRoot":""}